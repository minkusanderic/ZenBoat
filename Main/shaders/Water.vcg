#define NUM_OF_SPLASHES 5

uniform float3 EyePosition;
uniform float4x4 WorldViewProj;
uniform float time;
uniform float3 Splashes[NUM_OF_SPLASHES];
uniform float4x4 World;

void main( float4 in a_Position  : POSITION,
		   float2 in a_TexCoord    : TEXCOORD0,	
		   float3 in a_Normal : NORMAL,
		   
		   float2 out v_TexCoord   : TEXCOORD0,
		   float3 out v_Normal : TEXCOORD1,
		   float3 out v_Eye : TEXCOORD2,
		   float3 out v_Position_Tex : TEXCOORD3,
		   
		   float4 out v_Position : POSITION	   
           )
{
	float4 w_Position = mul( a_Position , World ); // a_Pos is rel to Model Space
	v_Position	= mul( a_Position, WorldViewProj );
	float z_pos = -0.1f;
	for(int i = 0; i < NUM_OF_SPLASHES; i++)
	{
		float dist = length(w_Position.xy - Splashes[i].xy);
		
		
		float wave_time =  Splashes[i].z;
		float wavelength = 100.0f;
		
		float lower_bound = wave_time - 100.0f;
		float upper_bound = wave_time + 100.0f;

		if( dist > lower_bound && dist < upper_bound && dist < 1000.0f)
		{ 
			float2 dir = normalize(w_Position.xy - Splashes[i].xy);
			z_pos += 10 * cos(3.14 * (dist - wave_time)/wavelength) * (1000.0f - dist)/1000.0f;
			a_Normal.xy = a_Normal.xy + (3.14/wavelength) * -sin(3.14 * (dist - wave_time)/wavelength) * ((1000.0f - dist)/1000.0f) * dir;
		}
	}
	
	a_Position.z = z_pos;
	v_Position	= mul( a_Position, WorldViewProj );
	v_Position_Tex = a_Position;
	v_Normal	= normalize(a_Normal);
	v_Eye		= normalize(mul(a_Position, World).xyz - EyePosition) ;
	v_TexCoord  = a_TexCoord;
	
}
